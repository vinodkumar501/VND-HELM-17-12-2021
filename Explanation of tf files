=========================================================== maint.tf ===========================================================

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region     = "us-east-1"
  access_key = "AKIAUMHZDA7YwertyeeXQ3U7JXB"                              #not recommended to store credentials like static 
  secret_key = "G5lFp8FpzqjwertyrewRBYF7NhM/ccArSdiIzavTa6j7nGrY"
}

=========================================================== ===========================================================
terraform init
terraform plan 
terraform apply 

$ ./terraform init

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching "~> 3.0"...
- Installing hashicorp/aws v3.70.0...
- Installed hashicorp/aws v3.70.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
====================================================================================
    
Once intialise is done it stores .files (hidden) files like .terraform/  .terraform.lock.hcl  in the same directory
  
$ ls -a
./  ../  .terraform/  .terraform.lock.hcl  main.tf  terraform.exe*

.terraform stores provider details 
  
/c/Users/vinod.chenna/Desktop/Terraform/.terraform/providers/registry.terraform.io/hashicorp/aws/3.70.0/windows_amd64
  
  
and it lock the state of provider version at 

cat .terraform.lock.hcl
  
# This file is maintained automatically by "terraform init".
# Manual edits may be lost in future updates.

provider "registry.terraform.io/hashicorp/aws" {
  version     = "3.70.0"
  constraints = "~> 3.0"
  hashes = [
    "h1:nUJfymSecxxYgW+Vc3tqv9Ymlqc91ZeGk5t4vnRaC3c=",
    "zh:0af710e528e21b930899f0ac295b0ceef8ad7b623dd8f38e92c8ec4bc7af0321",
    "zh:4cabcd4519c0aae474d91ae67a8e3a4a8c39c3945c289a9cf7c1409f64409abe",
    "zh:58da1a436facb4e4f95cd2870d211ed7bcb8cf721a4a61970aa8da191665f2aa",
    "zh:6465339475c1cd3c16a5c8fee61304dcad2c4a27740687d29c6cdc90d2e6423d",
    "zh:7a821ed053c355d70ebe33185590953fa5c364c1f3d66fe3f9b4aba3961646b1",
    "zh:7c3656cc9cc1739dcb298e7930c9a76ccfce738d2070841d7e6c62fbdae74eef",
    "zh:9d9da9e3c60a0c977e156da8590f36a219ae91994bb3df5a1208de2ab3ceeba7",
    "zh:a3138817c86bf3e4dca7fd3a92e099cd1bf1d45ee7c7cc9e9773ba04fc3b315a",
    "zh:a8603044e935dfb3cb9319a46d26276162c6aea75e02c4827232f9c6029a3182",
    "zh:aef9482332bf43d0b73317f5909dec9e95b983c67b10d72e75eacc7c4f37d084",
    "zh:fc3f3cad84f2eebe566dd0b65904c934093007323b9b85e73d9dd4535ceeb29d",
  ]
}

================================================ ec2.tf =========================================================================

resource "aws_instance" "myfirstserver" {                       #"<provider>_<resourcetype>" "<anyname>"
  ami           = "ami-0ed9277fb7eb570c9"
  instance_type = "t2.micro"

  tags = {
    Name = "vnd-amazon linux instance"
  }
}

=========================================================== ===========================================================
#https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance

#./terraform plan
#./terraform apply        --> It apply all .tf files in directory no need to specify .tf files explicitly it checks all and apply all .tf files

# Once apply is done it create a new file called "terraform.tfstate" file "terraform.tfstate.backup"

terraform.tfstate:

Stores all state data we created using .tf files once we apply whatever we created it store the state data in "terraform.tfstate" file
once we delete resource like "terraform destroy" it removes from state date from "terraform.tfstate"

terraform.tfstate.backup:
File consists of data of "terraform.tfstate" but once we destroy it erase data from "terraform.tfstate" but "terraform.tfstate.backup" still will have state data even
we delete resources.


#./terraform destroy      --> destroy all .tf files data 


#Here terraform it checks all .tf files in the directory 
#so we can add any no of .tf files it execute all 
#main.tf only provider and credentials you have to store as a standard perspective 
#we can include all in only main.tf file but its not feasible or difficult to update or debug the issue

=======================================================================
If you have created ec2 instance using ec2.tf file it store state date terraform.tf state file ,once you comment the resource or delete the resource from ec2.tf file
it treat as not needed so it destroy the resources even if you trigger "terraform apply"

*********************************************** terraform.tfstate  and terraform.tfstate.backup ***********************************************

once you apply "terraform apply" it stores the data into terraform.tfstate file , once you destroy "terraform destroy" it erase data from terraform.tfstate and load the backup
data into "terraform.tfstate.backup"




















































